generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String    @id @unique @default(uuid())
  name          String
  description   String
  tech_stack    String[]
  icon          String
  features      String
  // images        ProjImage[]
  repo          String?
  link          String
  tutorial_link String?
  comments      String[]
  views         Int?      @default(0)
  rating        Int?      @default(0)
  developer     User      @relation(fields: [developer_id], references: [id])
  developer_id  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

// model ProjImage {
//   id        String   @id @default(uuid())
//   url       String
//   public_id String
//   project   Project? @relation(fields: [projectId], references: [id])
//   projectId String?
//   createdAt DateTime @default(now())
// }

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @unique @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  resume        String?
  role          UserRole  @default(USER)
  projects      Project[]
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @unique @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @unique @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @unique @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
