generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id           String      @id @default(uuid())
  name         String
  description  String
  techStack    String[]    @map("tech_stack") // Better camelCase in model, snake_case in DB
  icon         String
  features     String
  images       ProjImage[] // Renamed for clarity (avoid PascalCase for relations)
  repo         String?
  link         String
  tutorialLink String?     @map("tutorial_link")
  comments     String[]
  views        Int         @default(0) // Removed nullable as default is 0
  rating       Int         @default(0) // Removed nullable as default is 0
  developer    User        @relation(fields: [developerId], references: [id])
  developerId  String // camelCase for field names
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt // Shouldn't be nullable

  @@index([developerId]) // Add index for better query performance
  @@map("projects") // Plural table name convention
}

model ProjImage {
  id        String   @id @default(uuid())
  url       String
  publicId  String   @map("public_id")
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  createdAt DateTime @default(now())

  @@map("project_images")
}

model User {
  id            String    @id
  name          String
  email         String
  phone         Int?
  emailVerified Boolean
  image         String?
  role          String?
  resume        String?
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime
  updatedAt     DateTime
  projects      Project[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
